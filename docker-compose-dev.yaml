services:

  app:
    build:
      context: .
    container_name: ${APP_NAME}
    ports:
      - ${GRPC_PORT}:${GRPC_PORT}
    env_file:
      - .env
    networks:
      - microservices_network
      - internal_network
    depends_on:
      db:
        condition: service_started

  db:
    image: postgres:16.3-alpine3.20
    container_name: ${APP_NAME}_${DB_HOST}
    ports:
      - ${DB_HOST_PORT}:${DB_PORT}
    env_file:
      - .env
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: always
    networks:
      - internal_network

  migrator:
    build:
      context: .
      dockerfile: migrator.Dockerfile
    container_name: ${MIGRATOR_NAME}
    restart: on-failure
    networks:
      - internal_network

  jaeger:
    image: jaegertracing/all-in-one:1
    container_name: jaeger
    env_file:
      - .env
    ports:
      - "${JAEGER_PORT}:${JAEGER_PORT}/udp"   # jaeger-agent
      - "5778:5778"                           # sampling strategy endpoint
      - "16686:16686"                         # web UI
      - "14268:14268"                         # collector HTTP endpoint
    networks:
      - microservices_network
      - internal_network

volumes:
  pgdata:

networks:
  microservices_network:
    external: true
  internal_network:
    driver: bridge
